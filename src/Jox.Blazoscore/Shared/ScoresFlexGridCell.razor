<div class="flex-fill border border-3 rounded rounded-3 m-1 mb-3 p-3">
    <div class="position-relative top-50 start-50 translate-middle text-center">
        <div class="d-flex flex-row align-items-center justify-content-center">
            <span class="mx-2"></span>
            <h2 class="mx-2">@PlayerState.Player.Name</h2>
            <div class="d-flex flex-column">
                <button type="button" class="btn btn-light btn-sm text-muted" @onclick="RenamePlayer">
                    <span class="oi oi-pencil"></span>
                </button>
                <button type="button" class="btn btn-light btn-sm text-muted my-1" @onclick="RemovePlayer">
                    <span class="oi oi-x"></span>
                </button>
            </div>
        </div>
        <h2>@PlayerState.Scores.Sum()</h2>
        <p>
            @if (PlayerState.Scores[0] > 0)
            {
                <i>PlayerState.Scores[0]</i>
            }
            @foreach (var score in PlayerState.Scores.Skip(1))
            {
                if (score >= 0)
                {
                    <span> + @score</span>
                }
                else
                {
                    <span> - @(0 - score)</span>
                }
            }
        </p>
        <button type="button" class="btn btn-primary btn-lg mx-2" @onclick="() => AddScore()">
            <span class="oi oi-plus"></span>
        </button>
        <button type="button" class="btn btn-secondary btn-sm mx-1" @onclick="() => AddZero()">+ 0</button>
        <button type="button" class="btn btn-warning btn-sm mx-1 text-muted" @onclick="() => RemoveLastScore()">
            <span class="oi oi-action-undo"></span>
        </button>
    </div>
</div>

@code {
#nullable disable warnings
    [CascadingParameter] public Game Game { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }
#nullable restore warnings

    [Parameter]
    public PlayerState? PlayerStateParameter { get; set; }
    public PlayerState PlayerState => PlayerStateParameter!;

    private async Task AddScore()
    {
        var result = await Modal.Show<EnterScore>("Add score").Result;
        if (result.Cancelled) return;
        if (result.Data is not int score) return;

        Game.UpdatePlayerState(PlayerState.AddScore(score));
    }
    private void AddZero()
    {
        Game.UpdatePlayerState(PlayerState.AddZero());
    }
    private void RemoveLastScore()
    {
        Game.UpdatePlayerState(PlayerState.RemoveLastScore());
    }
    async Task RenamePlayer()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(NamePlayer.PlayerName), PlayerState.Player.Name);
        var result = await Modal.Show<NamePlayer>("Rename player", parameters).Result;
        if (result.Cancelled) return;
        var name = result.Data as string;
        if (string.IsNullOrEmpty(name)) return;
        Game.RenamePlayer(PlayerState.Player, name);
    }
    void RemovePlayer()
    {
        Game.RemovePlayer(PlayerState.Player);
    }
}
